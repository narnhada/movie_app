{"version":3,"sources":["components/Movie.js","routes/Home.js","routes/About.js","components/Navigation.js","routes/Detail.js","App.js","serviceWorker.js","index.js"],"names":["Movie","title","year","summary","poster","genres","className","to","pathname","state","src","alt","map","genre","index","key","slice","Home","useState","isLoading","movies","loading","setLoading","movieList","a","axios","get","data","useEffect","movie","id","medium_cover_image","About","props","console","log","Navigation","Detail","location","history","undefined","push","App","path","component","exact","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8XA0CeA,MArCf,YAA0D,IAAzCC,EAAwC,EAAxCA,MAAOC,EAAiC,EAAjCA,KAAMC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,OAC7C,OACE,yBAAKC,UAAU,SACb,kBAAC,IAAD,CACEC,GAAI,CACFC,SAAU,gBACVC,MAAO,CAAEP,OAAMD,QAAOE,UAASC,SAAQC,YAGzC,yBAAKK,IAAKN,EAAQO,IAAKV,EAAOA,MAAOA,IACrC,yBAAKK,UAAU,eACb,wBAAIA,UAAU,gBAAgBL,GAC9B,wBAAIK,UAAU,eAAeJ,GAC7B,wBAAII,UAAU,iBACXD,EAAOO,KAAI,SAACC,EAAOC,GAClB,OACE,wBAAIC,IAAKD,EAAOR,UAAU,gBACvBO,OAKT,uBAAGP,UAAU,kBAAkBH,EAAQa,MAAM,EAAG,KAAhD,WC8BKC,MAnDf,WAAiB,IAAD,EACgBC,mBAAS,CACrCC,WAAW,EACXC,OAAQ,KAHI,mBACPC,EADO,KACEC,EADF,KAMRC,EAAS,uCAAG,8BAAAC,EAAA,sEAKNC,IAAMC,IACd,4DANc,gBAGJN,EAHI,EAEdO,KACEA,KAAQP,OAMZE,EAAW,CAAEF,SAAQD,WAAW,IAThB,2CAAH,qDAYfS,qBAAU,WACRL,MACC,IApBW,IAsBNJ,EAAsBE,EAAtBF,UAAWC,EAAWC,EAAXD,OAEnB,OACE,6BAASd,UAAU,aAChBa,EACC,yBAAKb,UAAU,UACb,0BAAMA,UAAU,gBAAhB,eAGF,yBAAKA,UAAU,UACZc,EAAOR,KAAI,SAACiB,GAEX,OACE,kBAAC,EAAD,CACEd,IAAKc,EAAMC,GACXA,GAAID,EAAMC,GACV5B,KAAM2B,EAAM3B,KACZD,MAAO4B,EAAM5B,MACbE,QAAS0B,EAAM1B,QACfC,OAAQyB,EAAME,mBACd1B,OAAQwB,EAAMxB,e,MChCf2B,MAbf,SAAeC,GAEb,OADAC,QAAQC,IAAIF,GAEV,yBAAK3B,UAAU,oBACb,8IAIA,yD,qBCIS8B,MAXf,WACE,OACE,yBAAK9B,UAAU,OAGb,kBAAC,IAAD,CAAMC,GAAG,KAAT,QACA,kBAAC,IAAD,CAAMA,GAAG,UAAT,WCSS8B,MAjBf,YAAwC,IAAtBC,EAAqB,EAArBA,SAAUC,EAAW,EAAXA,QAI1B,YAHuBC,IAAnBF,EAAS7B,OACX8B,EAAQE,KAAK,KAEXH,EAAS7B,MAET,yBAAKH,UAAU,qBACb,8BAAOgC,EAAS7B,MAAMR,OACtB,6BACA,8BAAOqC,EAAS7B,MAAMN,UAInB,MCGIuC,MAVf,WACE,OACE,oCACE,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOC,KAAK,IAAIC,UAAW3B,EAAM4B,OAAK,IACtC,kBAAC,IAAD,CAAOF,KAAK,SAASC,UAAWZ,IAChC,kBAAC,IAAD,CAAOW,KAAK,gBAAgBC,UAAWP,MCFzBS,QACW,cAA7BC,OAAOT,SAASU,UAEe,UAA7BD,OAAOT,SAASU,UAEhBD,OAAOT,SAASU,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,c","file":"static/js/main.b71df248.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Movie.css\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Movie({ title, year, summary, poster, genres }) {\r\n  return (\r\n    <div className=\"movie\">\r\n      <Link\r\n        to={{\r\n          pathname: \"/movie-detail\",\r\n          state: { year, title, summary, poster, genres },\r\n        }}\r\n      >\r\n        <img src={poster} alt={title} title={title} />\r\n        <div className=\"movie__data\">\r\n          <h3 className=\"movie__title\">{title}</h3>\r\n          <h5 className=\"movie__year\">{year}</h5>\r\n          <ul className=\"movie__genres\">\r\n            {genres.map((genre, index) => {\r\n              return (\r\n                <li key={index} className=\"movie__genre\">\r\n                  {genre}\r\n                </li>\r\n              );\r\n            })}\r\n          </ul>\r\n          <p className=\"movie__summary\">{summary.slice(0, 180)}...</p>\r\n        </div>\r\n      </Link>\r\n    </div>\r\n  );\r\n}\r\n\r\nMovie.propTypes = {\r\n  year: PropTypes.number.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n  summary: PropTypes.string.isRequired,\r\n  poster: PropTypes.string.isRequired,\r\n  genres: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n};\r\n\r\nexport default Movie;\r\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nimport \"./Home.css\";\nimport Movie from \"../components/Movie\";\n\nfunction Home() {\n  const [loading, setLoading] = useState({\n    isLoading: true,\n    movies: [],\n  });\n\n  const movieList = async () => {\n    const {\n      data: {\n        data: { movies },\n      },\n    } = await axios.get(\n      \"https://yts-proxy.now.sh/list_movies.json?sort_by=rating\"\n    );\n    // console.log(movies);\n    setLoading({ movies, isLoading: false });\n  };\n\n  useEffect(() => {\n    movieList();\n  }, []);\n\n  const { isLoading, movies } = loading;\n\n  return (\n    <section className=\"container\">\n      {isLoading ? (\n        <div className=\"loader\">\n          <span className=\"loader__text\">Loading...</span>\n        </div>\n      ) : (\n        <div className=\"movies\">\n          {movies.map((movie) => {\n            // console.log(movie);\n            return (\n              <Movie\n                key={movie.id}\n                id={movie.id}\n                year={movie.year}\n                title={movie.title}\n                summary={movie.summary}\n                poster={movie.medium_cover_image}\n                genres={movie.genres}\n              />\n            );\n          })}\n        </div>\n      )}\n    </section>\n  );\n}\nexport default Home;\n","import React from \"react\";\r\nimport \"./About.css\";\r\n\r\nfunction About(props) {\r\n  console.log(props);\r\n  return (\r\n    <div className=\"about__container\">\r\n      <span>\r\n        “Freedom is the freedom to say that two plus two make four. If that is\r\n        granted, all else follows.”\r\n      </span>\r\n      <span>- George Orwell, 1984</span>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default About;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./Navigation.css\";\r\n\r\nfunction Navigation() {\r\n  return (\r\n    <div className=\"nav\">\r\n      {/* <a href=\"/\">Home</a>          // href는 페이지를 다시 그리기 때문에 리액트에서는 안좋음\r\n      <a href=\"/about\">About</a>     // Link로 사용해야됨 */}\r\n      <Link to=\"/\">Home</Link>\r\n      <Link to=\"/about\">About</Link>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navigation;\r\n","import React from \"react\";\r\n\r\nfunction Detail({ location, history }) {\r\n  if (location.state === undefined) {\r\n    history.push(\"/\");\r\n  }\r\n  if (location.state) {\r\n    return (\r\n      <div className=\"detail__container\">\r\n        <span>{location.state.title}</span>\r\n        <br />\r\n        <span>{location.state.summary}</span>\r\n      </div>\r\n    );\r\n  } else {\r\n    return null;\r\n  }\r\n}\r\n\r\nexport default Detail;\r\n","import React from \"react\";\nimport Home from \"./routes/Home\";\nimport About from \"./routes/About\";\nimport \"./App.css\";\nimport { Route } from \"react-router-dom\";\nimport Navigation from \"./components/Navigation\";\nimport Detail from \"./routes/Detail\";\n\nfunction App() {\n  return (\n    <>\n      <Navigation />\n      <Route path=\"/\" component={Home} exact />\n      <Route path=\"/about\" component={About} />\n      <Route path=\"/movie-detail\" component={Detail} />\n    </>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}